#!/bin/sh
arg1=$1
arg2=$2
arg3=$3

getArgID() {
  echo "ID" > dataID.txt
  i=1
  currentSnapNum=`zfs list -t snapshot | grep $arg2@ | awk 'END{print NR}'`
  echo "ID" > dataID.txt
  while [ $i -le $currentSnapNum ]
  do
    echo $i >> dataID.txt 
    i=$((i+1))
  done  < dataName.txt
}

getArgName() {
  echo "DataSet" > dataName.txt
  zfs list -t snapshot | grep $arg2@ | awk -F " " '{ print $1 }' | sed -e 's/@[^$,]*//g' >> dataName.txt
}

getArgTime() {
  echo "Time" > dataTime.txt
  zfs list -t snapshot | grep $arg2@ | awk -F " " '{ print $1 }' | sed -e 's/[^$,]*@//g' >> dataTime.txt
 
}

printList() {
  paste dataID.txt dataName.txt dataTime.txt | column -t
}

listSpecific() {
  getArgID
  getArgName
  getArgTime
  printList
}

getAllName() {
  zfs list -t snapshot | awk -F " " '{ print $1 }' | sed -e 's/@[^$,]*//g' > dataName.txt
  sed -i.bak '1s/.*/DataSet/' dataName.txt
}

getAllTime() {
  zfs list -t snapshot | awk -F " " '{ print $1 }' | sed -e 's/[^$,]*@//g' > dataTime.txt
  sed -i.bak '1s/.*/Time/' dataTime.txt
}

getAllID() {
  rm -f dataID.txt
  i=1
  currentSnapNum=`zfs list -t snapshot | awk 'END{print NR}'`
  curName="s"
  prevName="s"
  while read line;
  do
    curName=$line
    if [ $curName != $prevName ]
    then
      i=1
    fi
    echo $i >> dataID.txt 
    i=$((i+1))
    prevName=$curName
  done < dataName.txt
  sed -i.bak '1s/.*/ID/' dataID.txt
}

listAll() {
  getAllName
  getAllTime
  getAllID
  printList
}

listZbackup() {
  if [ -z $arg2 ]
  then
    listAll
  else
    listSpecific
  fi
}

getDeleteDataFile() {
  zfs list -t snapshot | grep $arg2@ | awk -F " " '{ print $1 }' > deleteFile.txt
}

deleteDataWholeFile() {
  while read line;
  do
    zfs destroy -r $line   
  done < deleteFile.txt
}

deleteData() {
  getDeleteDataFile
  deleteDataWholeFile
}

deleteDataByID() {
  target=`awk NR==$arg3 deleteFile.txt`
  zfs destroy -r $target
}

deleteSpecific() {
  getDeleteDataFile
  deleteDataByID
}

deleteZbackup() {
  if [ -z $arg3 ]
  then 
    deleteData
  else
    deleteSpecific
  fi
}

sendID=1
sendData=""
updateID(){
  if [ -z $arg3 ]
  then
    sendID=1
  else
    sendID=$arg3
  fi
}

getSendData() {
  zfs list -t snapshot | grep $arg2@ | awk -F " " '{ print $1 }' > sendData.txt
  sendData=`awk NR==$sendID sendData.txt`
}

exportData() {
  backUpName=`echo $sendData | sed -e 's/@[^$,]*//g'` 
  backUpTime=`date +"%Y-%m-%d"`
  echo $backUpName
  zfs send $sendData | xz | openssl enc -aes-256-cbc -a -salt > $backUpName@$backUpTime.xz.enc
}

exportZbackup() {
  updateID
  getSendData
  exportData
}

importZbackup() {
  deleteData
  openssl enc -d -aes-256-cbc -a -in $arg3 | unxz | zfs receive -d -F $arg2  
}

rotationcount=20
updateRotationCount() {
  if [ -z $arg2 ]
  then
    rotationCount=20
  else
    rotationCount=$arg2
  fi
}

rotationLog() {
  echo "Rotate" $1
}

destroyOldSnap() {
 currentSnapNum=`zfs list -t snapshot | grep $arg1@ | awk 'END{print NR}'`
 while [ $currentSnapNum -ge $rotationCount ]
 do
   target=`zfs list -t snapshot | grep $arg1@ | awk -F " " '{if(NR==1)print $1}'`
   zfs destroy -r $target
   rotationLog $target
   currentSnapNum=`zfs list -t snapshot | grep $arg1@ | awk 'END{print NR}'`
 done
}

createLog() {
  echo "Snap" $arg1@$1
}

createNewSnap() {
  time=`date +"%Y-%m-%d_%H:%M:%S"`
  zfs snapshot $arg1@$time
  createLog $time
}


createZbackup() {
  updateRotationCount
  destroyOldSnap
  createNewSnap
}

checkUsage() {
  #check different usage
  if [ $arg1 = "--list" ]
  then
    listZbackup  
  elif [ $arg1 = "--delete" ]
  then
    deleteZbackup
  elif [ $arg1 = "--export" ]
  then
    exportZbackup
  elif [ $arg1 = "--import" ]
  then
    importZbackup
  else
    createZbackup
  fi
}

if [ -z $arg1 ]
then
  echo "argument 1 is empty"
else
 checkUsage
fi

